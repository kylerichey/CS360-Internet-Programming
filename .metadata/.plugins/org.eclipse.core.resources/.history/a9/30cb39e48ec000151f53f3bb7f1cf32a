//============================================================================
// Name        : project2.cpp
// Author      : Kyle Richey
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <string.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

#define SOCKET_ERROR        -1
#define BUFFER_SIZE         100
#define MESSAGE             "This is the message I'm sending back and forth"
#define QUEUE_SIZE          5
#define PATH_MAX 255

int main(int argc, char* argv[])
{
    int hSocket,hServerSocket;  /* handle to socket */
    struct hostent* pHostInfo;   /* holds info about a machine */
    struct sockaddr_in Address; /* Internet socket address stuct */
    int nAddressSize=sizeof(struct sockaddr_in);
    char pBuffer[BUFFER_SIZE];
    int nHostPort;
   // char directoryPath[255];


    if(argc < 3)
      {
        printf("\nUsage: server <host-port> <dir-path>\n");
        return 0;
      }

	nHostPort=atoi(argv[1]);



			FILE *fp;
		   int status;
		   char path [PATH_MAX];

		   strcpy(path argv[ 2]);

		   fp = popen("ls *", "r");
		   if (fp == NULL)
		       /* Handle error */;

		   while (fgets(path, PATH_MAX, fp) != NULL)
		       printf("%s", path);

		   status = pclose(fp);
		   if (status == -1) {
		       /* Error reported by pclose() */

		   } else {
		       /* Use macros described under wait() to inspect `status' in order
			  to determine success/failure of command executed by popen() */

		   }


   // printf("\n%s", directoryPath);
    printf("\nStarting server");

    printf("\nMaking socket");
    /* make a socket */
    hServerSocket=socket(AF_INET,SOCK_STREAM,0);

    int optval = 1;
    setsockopt (hServerSocket, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));


    if(hServerSocket == SOCKET_ERROR)
    {
        printf("\nCould not make a socket\n");
        return 0;
    }

    /* fill address struct */
    Address.sin_addr.s_addr=INADDR_ANY;
    Address.sin_port=htons(nHostPort);
    Address.sin_family=AF_INET;

    printf("\nBinding to port %d\n",nHostPort);

    /* bind to a port */
    if(bind(hServerSocket,(struct sockaddr*)&Address,sizeof(Address))
                        == SOCKET_ERROR)
    {
        printf("\nCould not connect to host\n");
        return 0;
    }
 /*  get port number */
    getsockname( hServerSocket, (struct sockaddr *) &Address,(socklen_t *)&nAddressSize);
    printf("opened socket as fd (%d) on port (%d) for stream i/o\n",hServerSocket, ntohs(Address.sin_port) );

        printf("Server\n\
              sin_family        = %d\n\
              sin_addr.s_addr   = %d\n\
              sin_port          = %d\n"
              , Address.sin_family
              , Address.sin_addr.s_addr
              , ntohs(Address.sin_port)
            );


    printf("\nMaking a listen queue of %d elements",QUEUE_SIZE);
    /* establish listen queue */
    if(listen(hServerSocket,QUEUE_SIZE) == SOCKET_ERROR)
    {
        printf("\nCould not listen\n");
        return 0;
    }

    while(1)
    {
        printf("\nWaiting for a connection\n");
        /* get the connected socket */
        hSocket=accept(hServerSocket,(struct sockaddr*)&Address,(socklen_t *)&nAddressSize);

        printf("\nGot a connection from %X (%d)\n",
              Address.sin_addr.s_addr,
              ntohs(Address.sin_port));
       // strcpy(pBuffer,MESSAGE);

        char xBuffer[1000];
        char buffer[1];
    	bool hasSeenNewLine = false;
    		int xBufferIndex = 0;
    		while (true) {

    			read(hSocket, buffer, 1);
    			if (buffer[0] == '\r') {
    				if (hasSeenNewLine) {
    					break;
    				}
    			}
    			if (buffer[0] == '\n') {
    				hasSeenNewLine = true;
    			} else {
    				hasSeenNewLine = false;
    			}

    			xBuffer[xBufferIndex++] = buffer[0];
    		}

       printf("Message Received:%s",xBuffer);


       // printf("\nSending \"%s\" to client",pBuffer);
        /* number returned by read() and write() is the number of bytes
        ** read or written, with -1 being that an error occured
        ** write what we received back to the server */
      //  write(hSocket,pBuffer,strlen(pBuffer)+1);
        /* read from socket into buffer */
      //  memset(pBuffer,0,sizeof(pBuffer));
       // read(hSocket,pBuffer,BUFFER_SIZE);

      /*  if(strcmp(pBuffer,MESSAGE) == 0)
            printf("\nThe messages match");
        else
            printf("\nSomething was changed in the message"); */

    printf("\nClosing the socket");
        /* close socket */
        if(close(hSocket) == SOCKET_ERROR)
        {
         printf("\nCould not close socket\n");
         return 0;
        }
    }
}
